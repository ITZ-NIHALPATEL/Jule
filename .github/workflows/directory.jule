use "std/os"
use "std/os/filepath"
use "std/slices"
use "std/strings"

// Buffer for the table.
let mut Table = strings::Builder{}

// Path strings should be formatted by markdown URLs.
let IgnorePaths: [...]str = [
	"search/error.jule",
]

let IgnorePackages: [...]str = [
	".",
	"..",
	".github",
	".git",
]

fn workflowFailed(message: str) {
	const FailExitCode = 1
	println(message)
	os::Exit(FailExitCode)
}

fn write(text: str) { Table.WriteStr(text)! }

fn writeLine(text: str) {
	Table.WriteStr(text)!
	Table.WriteByte('\n')!
}

// Subdirectories comes first and ordered by the strings::Compare function.
// Implementation files comes after subdirectories and ordered by the strings::Compare function.
fn sortDirents(mut &dirents: []os::DirEntry) {
	slices::SortFunc(dirents, fn(a: os::DirEntry, b: os::DirEntry): int {
		if a.Stat.IsDir() && !b.Stat.IsDir() {
			ret -1
		}
		if !a.Stat.IsDir() && b.Stat.IsDir() {
			ret +1
		}
		ret strings::Compare(a.Name, b.Name)
	})
}

fn makeName(mut s: str): str {
	// Remove all cutset substrings.
	let cutsetSubs = [
		".jule",
		".",
		"/",
		"\\",
	]
	for _, subs in cutsetSubs {
		s = strings::Replace(s, subs, "", -1)
	}

	// Replace all underlines with space.
	s = strings::Replace(s, "_", " ", -1)

	// Make uppercase first character of all words.
	let mut i = 0
	let mut waitSpace = false
	let mut sb = []byte(s)
	for i < len(sb); i++ {
		let b = sb[i]
		if waitSpace {
			if b == ' ' {
				waitSpace = false
			}
			continue
		}
		sb[i] = 'Z' - ('z' - b)
		waitSpace = true
	}
	ret str(sb)
}

fn isIgnorePackage(path: str): bool {
	for _, ip in IgnorePackages {
		if ip == path {
			ret true
		}
	}
	ret false
}

fn isIgnorePath(path: str): bool {
	for _, ip in IgnorePaths {
		if ip == path {
			ret true
		}
	}
	ret false
}

fn createDirectoryMd() {
	const MdPath = "./DIRECTORY.md"
	os::WriteFile(MdPath, unsafe { Table.Buf() }, 0o660) else {
		workflowFailed("a problem occurs when creating " + MdPath)
	}
}

fn walkPackage(package: str, path: str, indent: int) {
	let mut dirents = os::ReadDir(path) else {
		workflowFailed("directory did not readed")
		ret // Avoid error.
	}
	sortDirents(dirents)
	for _, d in dirents {
		if isIgnorePackage(d.Name) {
			continue
		}
		if strings::HasSuffix(d.Name, "_test.jule") {
			// ignore test files
			continue
		}

		// add file or directory as table entry
		url := path + "/" + d.Name
		tableName := makeName(d.Name)
		if isIgnorePath(url) {
			continue
		}

		write(strings::Repeat("  ", indent))
		write("- [")
		write(tableName)
		write("](")
		write(url)
		writeLine(")")

		if d.Stat.IsDir() {
			// append entries of subdirectory
			walkPackage(package, filepath::Join(path, d.Name), indent+1)
		}
	}
}

fn main() {
	writeLine("# Table of Contents")
	let mut dirents = os::ReadDir(".") else {
		workflowFailed("directory did not readed")
		ret // Avoid error.
	}
	sortDirents(dirents)
	for _, d in dirents {
		if isIgnorePackage(d.Name) {
			continue
		}
		if d.Stat.IsDir() {
			let packageTableName = makeName(d.Name)
			write("\n## ")
			writeLine(packageTableName)
			walkPackage(d.Name, filepath::Join(".", d.Name), 0)
		}
	}
	createDirectoryMd()
}
