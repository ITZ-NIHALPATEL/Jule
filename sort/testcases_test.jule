#build test

use "std/slices"
use "std/testing"

struct sortTest {
	input:    []int
	expected: []int
	name:     str
}

let sortTests: []sortTest = [
	//Sorted slice
	{
		input: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
		expected: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
		name: "Sorted Unsigned",
	},
	//Reversed slice
	{
		input: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1],
		expected: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
		name: "Reversed Unsigned",
	},
	//Sorted slice
	{
		input: [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
		expected: [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
		name: "Sorted Signed",
	},
	//Reversed slice
	{
		input: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10],
		expected: [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
		name: "Reversed Signed",
	},
	//Reversed slice, even length
	{
		input: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10],
		expected: [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
		name: "Reversed Signed #2",
	},
	//Random order with repetitions
	{
		input: [-5, 7, 4, -2, 6, 5, 8, 3, 2, -7, -1, 0, -3, 9, -6, -4, 10, 9, 1, -8, -9, -10],
		expected: [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 10],
		name: "Random order Signed",
	},
	//Single-entry slice
	{
		input: [1],
		expected: [1],
		name: "Singleton",
	},
	// Empty slice
	{
		input: [],
		expected: [],
		name: "Empty Slice",
	},
]

fn clone(s: []int): []int {
	ret append(make([]int, 0, len(s)), s...)
}

fn testGeneral(t: &testing::T, sortingFunction: fn(mut []int): []int) {
	for _, test in sortTests {
		actual := sortingFunction(clone(test.input))
		sorted := slices::Equal(actual, test.expected)
		if !sorted {
			t.Errorf("test {} failed", test.name)
			t.Errorf("actual {} expected {}", actual, test.expected)
		}
	}
}

#test
fn testBinaryInsertion(t: &testing::T) {
	testGeneral(t, BinaryInsertion[int])
}

#test
fn testBubble(t: &testing::T) {
	testGeneral(t, Bubble[int])
}

#test
fn testInsertion(t: &testing::T) {
	testGeneral(t, Insertion[int])
}

#test
fn testBucket(t: &testing::T) {
	testGeneral(t, Bucket[int])
}

#test
fn testCircle(t: &testing::T) {
	testGeneral(t, Circle[int])
}

#test
fn testCocktail(t: &testing::T) {
	testGeneral(t, Cocktail[int])
}

#test
fn testComb(t: &testing::T) {
	testGeneral(t, Comb[int])
}

#test
fn testCount(t: &testing::T) {
	testGeneral(t, Count[int])
}

#test
fn testCycle(t: &testing::T) {
	testGeneral(t, Cycle[int])
}

#test
fn testExchange(t: &testing::T) {
	testGeneral(t, Exchange[int])
}

#test
fn testMerge(t: &testing::T) {
	testGeneral(t, Merge[int])
}

#test
fn testPancake(t: &testing::T) {
	testGeneral(t, Pancake[int])
}

#test
fn testShell(t: &testing::T) {
	testGeneral(t, Shell[int])
}

#test
fn testQuicksort(t: &testing::T) {
	testGeneral(t, Quicksort[int])
}